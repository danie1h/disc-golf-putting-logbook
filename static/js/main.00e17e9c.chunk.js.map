{"version":3,"sources":["resources/images/pl-logo.png","home/home.js","about/about.js","button/button.js","log-putt/putt-info/putt-info.js","log-putt/display-putt/display-putt.js","log-putt/log-putt.js","results/results.js","no-match/no-match.js","PuttingLogApp.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","Link","to","id","About","href","target","rel","Button","props","console","log","onClick","content","PuttInfo","holeNum","button_Button","handleHitBtn","handleMissBtn","DisplayPutt","shape","mode","lib","x","y","radius","fill","draggable","onDragEnd","captureCanvasDrag","numPoints","innerRadius","outerRadius","captureCanvasClick","width","canvasWidth","height","canvasHeight","LogPutt","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeTagIndexList","metaTagOutput","metaTagsList","map","tag","index","key","event","captureMetaTagClick","activateMetaTags","resetActiveMetaTags","bind","assertThisInitialized","updateMetaTags","clickedTagIndex","findIndex","item","innerText","includes","updatedActiveTagIndexList","filter","updatedMetaTagOutput","setState","toConsumableArray","concat","metaTagList","activeTagList","_this2","_this3","captureResetClick","putt_info_PuttInfo","display_putt_DisplayPutt","captureNextClick","Component","PuttResults","puttDataList","puttLog","putt","shapeYPosition","shapeXPosition","activeMetaTags","join","length","puttCanvasShapes","NoMatch","PuttingLogApp","shapeXCoordinate","shapeYCoordinate","canvasOffsetLeft","document","getElementsByClassName","offsetLeft","canvasOffsetTop","offsetTop","clientX","pageY","positionDetails","xCoordinate","yCoordinate","rangePercentage","widthCenter","heightCenter","giveAmount","positionDescription","getPosition","puttCanvasShapesJSX","stroke","test","BrowserRouter","src","plLogo","alt","Switch","Route","exact","path","component","render","log_putt_log_putt","assign","results_results","Boolean","window","location","hostname","match","ReactDOM","src_PuttingLogApp_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00e17e9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pl-logo.c4139eef.png\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './home.css'\r\n\r\n/**\r\n * Returns the content of the Home page\r\n * * A title and slogan\r\n * * Links to the log putt page via Get Started button and about page via Learn More button\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nexport const Home = () => {\r\n  return (\r\n    <div className='home'>\r\n      <h1 className='title'>Disc Golf Putting Logbook</h1>\r\n      <h2 className='description'>Log Putts, View Stats, Improve Your Game, Repeat</h2>\r\n      <div className='home-link-items'>\r\n        <Link to='/disc-golf-putting-logbook/log' id='get-started' className='home-link'>Get Started</Link>\r\n        <Link to='/disc-golf-putting-logbook/about' id='learn-more' className='home-link'>Learn More</Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './about.css'\r\n\r\n/**\r\n * Returns the content of the About page\r\n * * An overview of disc golf and the value of the Putting Logbook\r\n * * Additional disc golf resources\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nexport const About = () => {\r\n  return (\r\n    <article className='about'>\r\n      <header className='page-header'>\r\n        <h1 className='title'>About the Putting Logbook</h1>\r\n      </header>\r\n      <hr className='divider' />\r\n      <section className='overview'>\r\n        <p className='description'>In the sport of <a href='https://www.pdga.com/introduction' target='_blank' rel='noopener noreferrer'>Disc Golf</a>, putting is an essential aspect and, arguably, one of the greatest challenges in a round. It's not uncommon for players to frequently miss their mark of the basket. Consistency is key, and this project will enable disc golfers to track their putting consistency. By identifying patterns, players will have the ability to leverage their stats to make the necessary modifications that will make them a better putter and, in turn, an improved player. Cue the Putting Logbook.</p>\r\n      </section>\r\n      <section className='resources'>\r\n        <header className='page-header'>\r\n          <h2 className='resources-title'>Related Disc Golf Readings</h2>\r\n        </header>\r\n        <hr className='divider' />\r\n        <ul className='resource-list'>\r\n          <li><a href='https://www.innovadiscs.com/home/disc-golf-faq/glossary-of-terms/' target='_blank' rel='noopener noreferrer'>Lingo</a></li>\r\n          <li><a href='https://allthingsdiscgolf.com/two-disc-golf-putting-tips-focus-simulation/' target='_blank' rel='noopener noreferrer'>Tips</a></li>\r\n          <li><a href='https://mainediscgolf.com/greenhorn/simple-putting-drill/' target='_blank' rel='noopener noreferrer'>Drills</a></li>\r\n          <li><a href='https://dgputtheads.com/disc-golf-putting-games' target='_blank' rel='noopener noreferrer'>Games</a></li>\r\n        </ul>\r\n      </section>\r\n    </article>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './button.css'\r\n\r\n/**\r\n * Returns a button based on the provided property parameters\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nexport const Button = (props) => {\r\n  console.log(typeof <button />)\r\n  return (\r\n    <button className={props.className} onClick={props.onClick}>{props.content}</button>\r\n  )\r\n}\r\n\r\nButton.propTypes = {\r\n  /** The value assigned as the button className */\r\n  className: PropTypes.string,\r\n  /** The function to call when the button is clicked */\r\n  onClick: PropTypes.func,\r\n  /** The innerHTML for the button */\r\n  content: PropTypes.string\r\n}\r\n","import React from 'react'\r\nimport { Button } from '../../button/button.js'\r\nimport PropTypes from 'prop-types'\r\nimport './putt-info.css'\r\n\r\n/**\r\n * Returns the content of hole information on the Log page\r\n * * hole information - hole number, hit or miss\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nexport const PuttInfo = (props) => {\r\n  return (\r\n    <div className='putting-details'>\r\n      <h2 className='putting-details-title'>Hole #{props.holeNum}</h2>\r\n      <div className='hit-or-miss'>\r\n        <Button\r\n          className='hit-btn main-btn'\r\n          onClick={props.handleHitBtn}\r\n          content='Hit'\r\n        />\r\n        <Button\r\n          className='miss-btn main-btn'\r\n          onClick={props.handleMissBtn}\r\n          content='Miss'\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nPuttInfo.propTypes = {\r\n  /** Indicates the current hole number the user is logging their putt */\r\n  holeNum: PropTypes.number,\r\n  /** Changes the mode to 'hit' and renders a green circle on the canvas */\r\n  handleHitBtn: PropTypes.func,\r\n  /** Changes the mode to 'miss' and renders a red star on the canvas */\r\n  handleMissBtn: PropTypes.func\r\n}\r\n","import React from 'react'\r\nimport { Stage, Layer, Circle, Star, Line } from 'react-konva'\r\nimport PropTypes from 'prop-types'\r\nimport './display-putt.css'\r\n\r\n/**\r\n * Returns the content of canvas on the Log page\r\n * * disc golf basket canvas\r\n * * ability for users to click or drag the location of the hit or miss\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nexport const DisplayPutt = (props) => {\r\n  let shape = (props.mode === 'hit')\r\n    ? <Circle x={props.x} y={props.y} radius={20} fill='green' draggable onDragEnd={props.captureCanvasDrag} />\r\n    : (props.mode === 'miss')\r\n      ? <Star x={props.x} y={props.y} numPoints={7} innerRadius={10} outerRadius={20} fill='red' draggable onDragEnd={props.captureCanvasDrag} />\r\n      : <Line />\r\n\r\n  return (\r\n    <div className='track-putt'>\r\n      <div className='canvas-container' onClick={props.captureCanvasClick}>\r\n        <Stage width={props.canvasWidth} height={props.canvasHeight}>\r\n          <Layer>\r\n            {shape}\r\n          </Layer>\r\n        </Stage>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nDisplayPutt.propTypes = {\r\n  /** Stores the hit or miss string, which determines what shape to render */\r\n  mode: PropTypes.string,\r\n  /** x coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\r\n  x: PropTypes.number,\r\n  /** y coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\r\n  y: PropTypes.number,\r\n  /** Captures where the user last dragged the shape and updates the shape position */\r\n  captureCanvasDrag: PropTypes.func,\r\n  /** Captures where the user last clicked on the canvas and updates the shape position */\r\n  captureCanvasClick: PropTypes.func,\r\n  /** The width at which the canvas is rendered */\r\n  canvasWidth: PropTypes.number,\r\n  /** The height at which the canvas is rendered */\r\n  canvasHeight: PropTypes.number\r\n}\r\n","import React, { Component } from 'react'\r\nimport { PuttInfo } from './putt-info/putt-info.js'\r\nimport { DisplayPutt } from './display-putt/display-putt.js'\r\nimport { Button } from '../button/button.js'\r\nimport { Link } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport './log-putt.css'\r\n\r\n/**\r\n * Returns the content of the Log page\r\n * * hole information - hole number, hit or miss\r\n * * disc golf basket canvas\r\n * * ability for users to click or drag the location of the hit or miss\r\n * * selection of meta tags for further data collection\r\n * * option to proceed to the next hole number and repeat the process\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nclass LogPutt extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      /** List of the active tags by index position */\r\n      activeTagIndexList: [],\r\n      /** Constructs the active and inactive meta tag list in JSX */\r\n      metaTagOutput: this.props.metaTagsList.map((tag, index) => {\r\n        return (\r\n          <Button\r\n            key={index}\r\n            className='tag-btn'\r\n            content={tag}\r\n            onClick={(event) => {\r\n              this.props.captureMetaTagClick(event)\r\n              this.activateMetaTags(event)\r\n            }}\r\n          />\r\n        )\r\n      })\r\n    }\r\n\r\n    this.resetActiveMetaTags = this.resetActiveMetaTags.bind(this)\r\n    this.activateMetaTags = this.activateMetaTags.bind(this)\r\n    this.updateMetaTags = this.updateMetaTags.bind(this)\r\n  }\r\n\r\n  /**\r\n * Handle occurances where a user clicks on a meta tag.\r\n * If a meta tag is not active and is clicked, then activate the meta tag.\r\n * If a meta tag is alread activated, then deactive the meta tag.\r\n *\r\n * @public\r\n */\r\n  activateMetaTags (event) {\r\n    const clickedTagIndex = this.state.metaTagOutput.findIndex(item => {\r\n      return event.target.innerText === item.props.content\r\n    })\r\n\r\n    if (this.state.activeTagIndexList.includes(clickedTagIndex)) {\r\n      const updatedActiveTagIndexList = this.state.activeTagIndexList.filter((item, index) => item !== clickedTagIndex)\r\n      const updatedMetaTagOutput = this.updateMetaTags(this.props.metaTagsList, updatedActiveTagIndexList)\r\n      this.setState({\r\n        activeTagIndexList: this.state.activeTagIndexList.filter((item, index) => item !== clickedTagIndex),\r\n        metaTagOutput: updatedMetaTagOutput\r\n      })\r\n    } else {\r\n      const updatedActiveTagIndexList = [...this.state.activeTagIndexList, clickedTagIndex]\r\n      const updatedMetaTagOutput = this.updateMetaTags(this.props.metaTagsList, updatedActiveTagIndexList)\r\n      this.setState({\r\n        activeTagIndexList: [...this.state.activeTagIndexList, clickedTagIndex],\r\n        metaTagOutput: updatedMetaTagOutput\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n * Clears all meta tag selections when a user selects the reset all option\r\n *\r\n * @public\r\n */\r\n  resetActiveMetaTags (event) {\r\n    const updatedMetaTagOutput = this.updateMetaTags(this.props.metaTagsList, [])\r\n\r\n    this.setState({\r\n      activeTagIndexList: [],\r\n      metaTagOutput: updatedMetaTagOutput\r\n    })\r\n  }\r\n\r\n  /**\r\n * Reconstructs the active and inactive meta tag list in JSX\r\n * @param {array} metaTagList - List of putting meta tags for user to select\r\n * @param {array} activeTagList - List of the active tags by index position\r\n *\r\n * @public\r\n */\r\n  updateMetaTags (metaTagList, activeTagList) {\r\n    const updatedMetaTagOutput = metaTagList.map((tag, index) => {\r\n      if (activeTagList.includes(index)) {\r\n        return (\r\n          <Button\r\n            key={index}\r\n            className='tag-btn active'\r\n            content={tag}\r\n            onClick={(event) => {\r\n              this.props.captureMetaTagClick(event)\r\n              this.activateMetaTags(event)\r\n            }}\r\n          />\r\n        )\r\n      } else {\r\n        return (\r\n          <Button\r\n            key={index}\r\n            className='tag-btn'\r\n            content={tag}\r\n            onClick={(event) => {\r\n              this.props.captureMetaTagClick(event)\r\n              this.activateMetaTags(event)\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    })\r\n\r\n    return updatedMetaTagOutput\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='log-putt'>\r\n        <header className='page-header'>\r\n          <h1 className='title'>Log</h1>\r\n          <div className='header-options'>\r\n            <Button\r\n              className='reset-all-btn'\r\n              onClick={() => {\r\n                this.props.captureResetClick()\r\n                this.resetActiveMetaTags()\r\n              }}\r\n              content='Reset All'\r\n            />\r\n            <Link to='/disc-golf-putting-logbook/results' className='get-results'>Results</Link>\r\n          </div>\r\n        </header>\r\n        <hr className='divider' />\r\n        <div className='log-putt-controls'>\r\n          <PuttInfo\r\n            className='putt-info'\r\n            holeNum={this.props.holeNum}\r\n            handleHitBtn={this.props.handleHitBtn}\r\n            handleMissBtn={this.props.handleMissBtn}\r\n          />\r\n          <DisplayPutt\r\n            mode={this.props.mode}\r\n            x={this.props.x}\r\n            y={this.props.y}\r\n            captureCanvasDrag={this.props.captureCanvasDrag}\r\n            captureCanvasClick={this.props.captureCanvasClick}\r\n            canvasWidth={this.props.canvasWidth}\r\n            canvasHeight={this.props.canvasHeight}\r\n          />\r\n          <div className='tags'>\r\n            {this.state.metaTagOutput}\r\n          </div>\r\n          <Button\r\n            className='next-btn main-btn'\r\n            onClick={() => {\r\n              this.props.captureNextClick()\r\n              this.resetActiveMetaTags()\r\n            }}\r\n            content='Next'\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LogPutt\r\n\r\nLogPutt.propTypes = {\r\n  /** List of putting meta tags for user to select */\r\n  metaTagsList: PropTypes.array,\r\n  /** When the user clicks a meta tag that tag value is stored so that it can be used/displayed in results */\r\n  captureMetaTagClick: PropTypes.func,\r\n  /** Clears all putts logged */\r\n  captureResetClick: PropTypes.func,\r\n  /** Indicates the current hole number the user is logging their putt */\r\n  holeNum: PropTypes.number,\r\n  /** Changes the mode to 'hit' and renders a green circle on the canvas */\r\n  handleHitBtn: PropTypes.func,\r\n  /** Changes the mode to 'miss' and renders a red star on the canvas */\r\n  handleMissBtn: PropTypes.func,\r\n  /** Stores the hit or miss string, which determines what shape to render */\r\n  mode: PropTypes.string,\r\n  /** x coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\r\n  x: PropTypes.number,\r\n  /** y coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\r\n  y: PropTypes.number,\r\n  /** Captures where the user last dragged the shape and updates the shape position */\r\n  captureCanvasDrag: PropTypes.func,\r\n  /** Captures where the user last clicked on the canvas and updates the shape position */\r\n  captureCanvasClick: PropTypes.func,\r\n  /** The width at which the canvas is rendered */\r\n  canvasWidth: PropTypes.number,\r\n  /** The height at which the canvas is rendered */\r\n  canvasHeight: PropTypes.number,\r\n  /** Stores the current putt information and renders a new session for the user to log another putt */\r\n  captureNextClick: PropTypes.func\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Stage, Layer } from 'react-konva'\r\nimport PropTypes from 'prop-types'\r\nimport './results.css'\r\n\r\n/**\r\n * Returns the content of the Results page\r\n * * renders the data table\r\n * * displays the overview canvas of all putts\r\n * * displays all putts and putt information in a data table\r\n *\r\n * If no putt data is available, then indicate there is no message and provide a link to the log page\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nclass PuttResults extends Component {\r\n  render () {\r\n    let puttDataList = this.props.puttLog.map(putt => {\r\n      return (\r\n        <tr key={putt.holeNum}>\r\n          <td>{putt.holeNum}</td>\r\n          <td>{putt.mode}</td>\r\n          <td>{putt.shapeYPosition}, {putt.shapeXPosition}</td>\r\n          <td>{putt.activeMetaTags.join(', ')}</td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className='putting-results'>\r\n        <header className='page-header'>\r\n          <h1 className='title'>Results</h1>\r\n          <p className='coming-soon'>More features and stats coming soon!</p>\r\n        </header>\r\n        <hr className='divider' />\r\n        {\r\n          (puttDataList.length > 0)\r\n            ? (\r\n              <div id='valid-putting-results'>\r\n                <div className='canvas-container'>\r\n                  <Stage width={this.props.canvasWidth} height={this.props.canvasHeight}>\r\n                    <Layer>\r\n                      {this.props.puttCanvasShapes}\r\n                    </Layer>\r\n                  </Stage>\r\n                </div>\r\n                <table className='data-table'>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Hole #</th>\r\n                      <th>Putt Attempt</th>\r\n                      <th>Position</th>\r\n                      <th>Tags</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {puttDataList}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )\r\n            : (\r\n              <p id='no-data'>No Data Available. Log your putts <Link to='/disc-golf-putting-logbook/log'>here</Link>, then check your results.</p>\r\n            )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PuttResults\r\n\r\nPuttResults.propTypes = {\r\n  /** Indicates the current hole number the user is logging their putt */\r\n  holeNum: PropTypes.number,\r\n  /** Stores the hit or miss string, which determines what shape to render */\r\n  mode: PropTypes.string,\r\n  /** x coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\r\n  shapeXPosition: PropTypes.number,\r\n  /** y coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\r\n  shapeYPosition: PropTypes.number,\r\n  /** The width at which the canvas is rendered */\r\n  canvasWidth: PropTypes.number,\r\n  /** The height at which the canvas is rendered */\r\n  canvasHeight: PropTypes.number,\r\n  /** List of meta tag strings to output in the putting log data table */\r\n  activeMetaTags: PropTypes.array,\r\n  /** List of logged putting shapes to display on the canvas */\r\n  puttCanvasShapes: PropTypes.array,\r\n  /** List of submitted putts and putt details */\r\n  puttLog: PropTypes.array\r\n}\r\n","import React from 'react'\r\nimport './no-match.css'\r\n\r\n/**\r\n * Returns a page with a 404 error if the user navigates to an invalid path\r\n *\r\n * @version 0.1.0\r\n * @author [danie1h](https://github.com/danie1h)\r\n */\r\nexport const NoMatch = () => {\r\n  return (\r\n    <div className='no-match'>\r\n      <h1 className='title'>404 Error: Page Not Found</h1>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom'\nimport { Circle, Star } from 'react-konva'\nimport { Home } from './home/home.js'\nimport { About } from './about/about.js'\nimport LogPutt from './log-putt/log-putt.js'\nimport PuttResults from './results/results.js'\nimport { NoMatch } from './no-match/no-match.js'\nimport plLogo from './resources/images/pl-logo.png'\nimport PropTypes from 'prop-types'\nimport './PuttingLogApp.css'\n\n/**\n * Main component\n * * Constructs a header menu bar\n * * Handles routing and transmits state to child pages: home, about, log, results\n *\n * @version 0.1.0\n * @author [danie1h](https://github.com/danie1h)\n */\nclass PuttingLogApp extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      /** List of submitted putts and putt details */\n      puttLog: [],\n      /** List of logged putting shapes to display on the canvas */\n      puttCanvasShapes: [],\n      /** Indicates the current hole number the user is logging their putt */\n      holeNum: 1,\n      /** Stores the hit or miss string, which determines what shape to render */\n      mode: '',\n      /** The width at which the canvas is rendered */\n      canvasWidth: 300,\n      /** The height at which the canvas is rendered */\n      canvasHeight: 300,\n      /** x coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\n      shapeXCoordinate: 300 / 2,\n      /** y coordinate of the rendered shape. Default is in the center of the canvas. Updated based on user drag or click. */\n      shapeYCoordinate: 300 / 2,\n      /** List of meta tag strings to output in the putting log data table */\n      activeMetaTags: []\n    }\n\n    this.handleHitBtn = this.handleHitBtn.bind(this)\n    this.handleMissBtn = this.handleMissBtn.bind(this)\n    this.captureCanvasClick = this.captureCanvasClick.bind(this)\n    this.captureCanvasDrag = this.captureCanvasDrag.bind(this)\n    this.captureNextClick = this.captureNextClick.bind(this)\n    this.captureMetaTagClick = this.captureMetaTagClick.bind(this)\n    this.captureResetClick = this.captureResetClick.bind(this)\n  }\n\n  /**\n * Changes the mode to 'hit' and renders a green circle on the canvas\n *\n * @public\n */\n  handleHitBtn () {\n    this.setState({\n      mode: 'hit'\n    })\n  }\n\n  /**\n * Changes the mode to 'miss' and renders a green circle on the canvas\n *\n * @public\n */\n  handleMissBtn () {\n    this.setState({\n      mode: 'miss'\n    })\n  }\n\n  /**\n * Captures where the user last clicked on the canvas and updates the shape position\n *\n * @public\n */\n  captureCanvasClick (event) {\n    let canvasOffsetLeft = document.getElementsByClassName('konvajs-content')[0].offsetLeft\n    let canvasOffsetTop = document.getElementsByClassName('konvajs-content')[0].offsetTop\n\n    this.setState({\n      shapeXCoordinate: event.clientX - canvasOffsetLeft,\n      shapeYCoordinate: event.pageY - canvasOffsetTop\n    })\n  }\n\n  /**\n * Captures where the user last dragged the shape and updates the shape position\n *\n * @public\n */\n  captureCanvasDrag (event) {\n    this.setState({\n      shapeXCoordinate: event.target.x(),\n      shapeYCoordinate: event.target.y()\n    })\n  }\n\n  /**\n * Stores the current putt information (coordinates, shape, holeNum, active meta tags), increments holeNum and sets blank state properties for the next hole\n *\n * @public\n */\n  captureNextClick () {\n    function getPosition (width, height, xCoordinate, yCoordinate, rangePercentage) {\n      let widthCenter = width / 2\n      let heightCenter = height / 2\n      let giveAmount = widthCenter * rangePercentage\n      let positionDescription = {\n        x: '',\n        y: ''\n      };\n\n      (xCoordinate < widthCenter - giveAmount)\n        ? positionDescription.x = 'left'\n        : (xCoordinate > widthCenter + giveAmount)\n          ? positionDescription.x = 'right'\n          : positionDescription.x = 'center';\n\n      (yCoordinate < heightCenter - giveAmount)\n        ? positionDescription.y = 'high'\n        : (yCoordinate > heightCenter + giveAmount)\n          ? positionDescription.y = 'low'\n          : positionDescription.y = 'center'\n\n      return positionDescription\n    }\n\n    let positionDetails = getPosition(this.state.canvasWidth, this.state.canvasHeight, this.state.shapeXCoordinate, this.state.shapeYCoordinate, 0.1)\n\n    let puttCanvasShapesJSX = (this.state.mode === 'hit')\n      ? (\n        <Circle\n          key={this.state.holeNum}\n          x={this.state.shapeXCoordinate}\n          y={this.state.shapeYCoordinate}\n          radius={20}\n          fill='green'\n          stroke='black'\n        />\n      )\n      : (\n        <Star\n          key={this.state.holeNum}\n          x={this.state.shapeXCoordinate}\n          y={this.state.shapeYCoordinate}\n          numPoints={7}\n          innerRadius={10}\n          outerRadius={20}\n          fill='red'\n          stroke='black'\n        />\n      )\n\n    this.setState({\n      puttLog: [...this.state.puttLog, {\n        holeNum: this.state.holeNum,\n        mode: this.state.mode,\n        shapeXCoordinate: this.state.shapeXCoordinate,\n        shapeYCoordinate: this.state.shapeYCoordinate,\n        shapeXPosition: positionDetails.x,\n        shapeYPosition: positionDetails.y,\n        activeMetaTags: this.state.activeMetaTags\n      }],\n      puttCanvasShapes: [...this.state.puttCanvasShapes, puttCanvasShapesJSX],\n      holeNum: this.state.holeNum + 1,\n      mode: '',\n      shapeXCoordinate: 300 / 2,\n      shapeYCoordinate: 300 / 2,\n      activeMetaTags: []\n    })\n  }\n\n  /**\n * When the user clicks a meta tag that tag value is stored so that it can be used/displayed in results\n *\n * @public\n */\n  captureMetaTagClick (event) {\n    if (/active/.test(event.target.className)) {\n      this.setState({\n        activeMetaTags: this.state.activeMetaTags.filter(tag => tag !== event.target.innerText)\n      })\n    } else {\n      this.setState({\n        activeMetaTags: [...this.state.activeMetaTags, event.target.innerText]\n      })\n    }\n  }\n\n  /**\n * Clears all putts logged\n *\n * @public\n */\n  captureResetClick () {\n    this.setState({\n      puttLog: [],\n      puttCanvasShapes: [],\n      holeNum: 1,\n      mode: '',\n      shapeXCoordinate: 300 / 2,\n      shapeYCoordinate: 300 / 2,\n      activeMetaTags: []\n    })\n  }\n\n  render () {\n    return (\n      <Router>\n        <div className='putting-log-app'>\n          <header className='header-container'>\n            <div className='header-home'>\n              <Link to='/disc-golf-putting-logbook/' className='header-logo'><img className='logo' src={plLogo} width='25' height='25' alt='logo' /></Link>\n              <Link to='/disc-golf-putting-logbook/' className='header-title'>Putting Logbook</Link>\n            </div>\n            <nav className='header-nav'>\n              <Link to='/disc-golf-putting-logbook/about' className='header-about'>About</Link>\n              <Link to='/disc-golf-putting-logbook/log' className='header-log'>Log</Link>\n              <Link to='/disc-golf-putting-logbook/results' className='header-results'>Results</Link>\n            </nav>\n          </header>\n\n          <Switch>\n            <Route exact path='/disc-golf-putting-logbook/' component={Home} />\n            <Route exact path='/disc-golf-putting-logbook/about' component={About} />\n            <Route\n              path='/disc-golf-putting-logbook/log'\n              render={props => <LogPutt {...props}\n                holeNum={this.state.holeNum}\n                handleHitBtn={this.handleHitBtn}\n                handleMissBtn={this.handleMissBtn}\n                mode={this.state.mode}\n                x={this.state.shapeXCoordinate}\n                y={this.state.shapeYCoordinate}\n                captureCanvasDrag={this.captureCanvasDrag}\n                captureCanvasClick={this.captureCanvasClick}\n                canvasWidth={this.state.canvasWidth}\n                canvasHeight={this.state.canvasHeight}\n                captureNextClick={this.captureNextClick}\n                captureResetClick={this.captureResetClick}\n                captureMetaTagClick={this.captureMetaTagClick}\n                metaTagsList={this.props.metaTagsList}\n              />}\n            />\n            <Route\n              path='/disc-golf-putting-logbook/results'\n              render={props => <PuttResults {...props}\n                puttLog={this.state.puttLog}\n                canvasWidth={this.state.canvasWidth}\n                canvasHeight={this.state.canvasHeight}\n                puttCanvasShapes={this.state.puttCanvasShapes}\n              />}\n            />\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default PuttingLogApp\n\nPuttingLogApp.propTypes = {\n  /** List of meta tags for user to select on each putt logged */\n  metaTagsList: PropTypes.array\n}\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport PuttingLogApp from './PuttingLogApp'\nimport * as serviceWorker from './serviceWorker'\n\n/** Source of putting meta tags for user to select on each putt logged */\nconst metaTagsList = ['downhill', 'uphill', 'headwind', 'tailwind', 'left to right wind', 'right to left wind', 'bullseye', 'c1', 'c2', 'outside c2', 'spit out', 'cut-through', 'straddle', 'jump putt', 'turbo', 'skip-in', 'forehand', 'backhand', 'hyzer', 'anhyzer']\n\nReactDOM.render(<PuttingLogApp metaTagsList={metaTagsList} />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}