{"version":3,"sources":["putt-info/putt-info.js","display-putt/display-putt.js","save-putt/save-putt.js","putt-overview/putt-overview.js","reset-btn/reset-btn.js","PuttingLogApp.js","serviceWorker.js","index.js"],"names":["PuttInfo","props","react_default","a","createElement","className","holeNum","onClick","handleHitBtn","handleMissBtn","DisplayPutt","shape","this","previousPuttOutput","length","mode","lib","x","y","radius","fill","draggable","onDragEnd","captureDrag","numPoints","innerRadius","outerRadius","captureClick","width","canvasWidth","height","canvasHeight","Component","SavePutt","type","PuttOverview","ResetBtn","PuttingLogApp","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","previousPutt","shapeXCoordinate","shapeYCoordinate","bind","assertThisInitialized","captureCanvasClick","captureCanvasDrag","captureNextClick","captureOverviewClick","captureResetClick","setState","event","canvasOffsetLeft","document","getElementsByClassName","offsetLeft","canvasOffsetTop","offsetTop","clientX","pageY","target","toConsumableArray","concat","previousPuttJSX","map","putt","key","putt_overview_putt_overview","reset_btn_ResetBtn","putt_info_PuttInfo","display_putt_display_putt","save_putt_SavePutt","Boolean","window","location","hostname","match","ReactDOM","render","src_PuttingLogApp_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ed3ea78.chunk.js","sourcesContent":["import React from 'react'\r\nimport './putt-info.css'\r\n\r\nexport const PuttInfo = (props) => {\r\n    return(\r\n      <div className=\"putting-details\">\r\n        <h2 className=\"putting-details-title\">Hole #{props.holeNum}</h2>\r\n        <div className=\"hit-or-miss\">\r\n          <button className=\"hit\" onClick={props.handleHitBtn}>Hit</button>\r\n          <button className=\"miss\" onClick={props.handleMissBtn}>Miss</button>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Stage, Layer, Circle, Star, Line } from 'react-konva'\r\nimport './display-putt.css'\r\n\r\nclass DisplayPutt extends Component {\r\n  render() {\r\n    let shape = (this.props.previousPuttOutput.length !== 0) ?\r\n        this.props.previousPuttOutput\r\n      : (this.props.mode === \"hit\") ?\r\n        <Circle x={this.props.x} y={this.props.y} radius={20} fill=\"green\" draggable onDragEnd={this.props.captureDrag} />\r\n      : (this.props.mode === \"miss\") ?\r\n        <Star x={this.props.x} y={this.props.y} numPoints={7} innerRadius={10} outerRadius={20} fill=\"red\" draggable onDragEnd={this.props.captureDrag} />\r\n      :\r\n        <Line />\r\n\r\n    return (\r\n      <div className=\"track-putt\">\r\n        <div className=\"canvas-container\" onClick={this.props.captureClick}>\r\n          <Stage width={this.props.canvasWidth} height={this.props.canvasHeight}>\r\n            <Layer>\r\n              {shape}\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default DisplayPutt\r\n","import React from 'react'\r\nimport './save-putt.css'\r\n\r\nexport const SavePutt = (props) => {\r\n  return (\r\n    <div className=\"save-putt\">\r\n      <button className=\"save\" type=\"submit\" onClick={props.captureClick}>Next</button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './putt-overview.css'\r\n\r\nclass PuttOverview extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"putting-overview\">\r\n        <button className=\"overview\" type=\"submit\" onClick={this.props.captureClick}>Overview</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default PuttOverview\r\n","import React from 'react'\r\nimport './reset-btn.css'\r\n\r\nexport const ResetBtn = (props) => {\r\n  return (\r\n    <div className=\"reset-btn\">\r\n      <button className=\"reset\" type=\"submit\" onClick={props.captureClick}>Reset</button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\nimport { Circle, Star } from 'react-konva'\nimport { PuttInfo } from './putt-info/putt-info.js'\nimport DisplayPutt from './display-putt/display-putt.js'\nimport { SavePutt } from './save-putt/save-putt.js'\nimport PuttOverview from './putt-overview/putt-overview.js'\nimport { ResetBtn } from './reset-btn/reset-btn.js'\nimport './PuttingLogApp.css'\n\nclass PuttingLogApp extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      previousPutt: [],\n      previousPuttOutput: [],\n      holeNum: 1,\n      mode: '',\n      canvasWidth: 300,\n      canvasHeight: 300,\n      shapeXCoordinate: 300 / 2,\n      shapeYCoordinate: 300 / 2\n    }\n\n    this.handleHitBtn = this.handleHitBtn.bind(this)\n    this.handleMissBtn = this.handleMissBtn.bind(this)\n    this.captureCanvasClick = this.captureCanvasClick.bind(this)\n    this.captureCanvasDrag = this.captureCanvasDrag.bind(this)\n    this.captureNextClick = this.captureNextClick.bind(this)\n    this.captureOverviewClick = this.captureOverviewClick.bind(this)\n    this.captureResetClick = this.captureResetClick.bind(this)\n  }\n\n  handleHitBtn() {\n    this.setState({\n      mode: 'hit',\n    })\n  }\n\n  handleMissBtn() {\n    this.setState({\n      mode: 'miss',\n    })\n  }\n\n  captureCanvasClick(event) {\n    let canvasOffsetLeft = document.getElementsByClassName('konvajs-content')[0].offsetLeft\n    let canvasOffsetTop = document.getElementsByClassName('konvajs-content')[0].offsetTop\n\n    this.setState({\n      shapeXCoordinate: event.clientX - canvasOffsetLeft,\n      shapeYCoordinate: event.pageY - canvasOffsetTop,\n    })\n  }\n\n  captureCanvasDrag(event) {\n    this.setState({\n      shapeXCoordinate: event.target.x(),\n      shapeYCoordinate: event.target.y()\n    })\n  }\n\n  captureNextClick() {\n    this.setState({\n      previousPutt: [...this.state.previousPutt, {\n        holeNum: this.state.holeNum,\n        mode: this.state.mode,\n        shapeXCoordinate: this.state.shapeXCoordinate,\n        shapeYCoordinate: this.state.shapeYCoordinate\n      }],\n      holeNum: this.state.holeNum + 1,\n      mode: '',\n      shapeXCoordinate: 300 / 2,\n      shapeYCoordinate: 300 / 2\n    })\n  }\n\n  captureOverviewClick() {\n    let previousPuttJSX = this.state.previousPutt.map( putt => {\n      if (putt.mode === \"hit\") {\n        return <Circle key={putt.holeNum} x={putt.shapeXCoordinate} y={putt.shapeYCoordinate} radius={20} fill=\"green\" />\n      } else { // putt.mode === \"miss\"\n        return <Star key={putt.holeNum} x={putt.shapeXCoordinate} y={putt.shapeYCoordinate} numPoints={7} innerRadius={10} outerRadius={20} fill=\"red\" />\n      }\n    })\n\n    this.setState({\n      previousPuttOutput: previousPuttJSX\n    })\n  }\n\n  captureResetClick() {\n    this.setState({\n      previousPutt: [],\n      previousPuttOutput: [],\n      holeNum: 1,\n      mode: '',\n      shapeXCoordinate: 300 / 2,\n      shapeYCoordinate: 300 / 2\n    })\n  }\n\n\n  render() {\n    return (\n      <div className='putting-log-app'>\n        <header className='App-header'>\n          <h1>Putting Logbook</h1>\n        </header>\n        <div className='main'>\n          <div className=\"master-controls\">\n            <PuttOverview\n              captureClick={this.captureOverviewClick}\n            />\n            <ResetBtn\n              captureClick={this.captureResetClick}\n            />\n          </div>\n          <PuttInfo\n            holeNum={this.state.holeNum}\n            handleHitBtn={this.handleHitBtn}\n            handleMissBtn={this.handleMissBtn}\n          />\n          <DisplayPutt\n            mode={this.state.mode}\n            x={this.state.shapeXCoordinate}\n            y={this.state.shapeYCoordinate}\n            captureDrag={this.captureCanvasDrag}\n            captureClick={this.captureCanvasClick}\n            canvasWidth={this.state.canvasWidth}\n            canvasHeight={this.state.canvasHeight}\n            previousPuttOutput={this.state.previousPuttOutput}\n          />\n          <SavePutt\n            captureClick={this.captureNextClick}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PuttingLogApp\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PuttingLogApp from './PuttingLogApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PuttingLogApp />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}